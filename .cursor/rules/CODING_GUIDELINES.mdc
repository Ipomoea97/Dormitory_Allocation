---
description: 
globs: 
alwaysApply: true
---
## 一、注意事项

- Always respond in 中文
- 对于thinking推理的模型，不要忽略了详细的思考过程，同时需要展示完整的思考过程，同时确保用中文进行展示
- 我的操作系统是Windows 11，在 PowerShell 中，通常使用分号";"来分隔要在同一行上执行的命令
- 使用app.run()而不是app.run.server()
- 在修改错误代码时，请注意不要把原有的一些重要元素（如图标、模块）删减了，注意检查

## 二、代码风格

本文档中的代码风格指南以 [PEP 8 -- Style Guide for Python Code](mdc:https:/www.python.org/dev/peps/pep-0008) 为基础，并包含项目特定的补充和强调。推荐使用自动化格式化工具如 `Black` 和 `isort` 来确保代码风格的一致性。


## 三、版本控制 (Git)

- **分支策略**:
    - `main` (或 `master`): 保护分支，只接受来自 `develop` 或特性分支的合并请求 (Pull Request / Merge Request)，并且必须通过代码审查和测试。
    - `develop`: 主要开发分支，新功能在此基础上进行开发。
    - `feature/<feature-name>` 或 `fix/<issue-id>`: 从 `develop` 分支创建，分别用于开发新功能或修复 Bug。
    - `release/<version>`: 用于准备发布版本的分支。
- **提交信息 (Commit Messages)**:
    - 提交信息应清晰、简洁，并能概括本次提交的内容。
    - 推荐使用约定式提交规范 (Conventional Commits)，例如:
        - `feat: add user authentication feature`
        - `fix: resolve issue with data parsing`
        - `docs: update README with installation instructions`
        - `style: reformat code using Black`
        - `refactor: improve performance of data loading`
        - `test: add unit tests for user model`
- **代码审查 (Code Review)**:
    - 所有进入 `develop` 或 `main` 分支的代码都必须经过至少一名其他团队成员的审查。
    - 审查重点包括代码风格、逻辑正确性、性能、可维护性和测试覆盖率。


## 四、依赖管理

- 所有项目依赖（包括直接和间接依赖）都应记录在 `requirements.txt` 文件中，并指定版本号，以确保环境的一致性。
- 考虑使用虚拟环境 (如 `venv`, `conda`) 来隔离项目依赖。
- 定期更新依赖库到最新稳定版本，并测试兼容性。

## 五、文档

- 除了代码内的文档字符串，关键的设计决策、架构图、API 文档（如果适用）等应另外撰写文档，并妥善保存。
- `README.md` 文件应保持最新，提供项目入门所需的基本信息。